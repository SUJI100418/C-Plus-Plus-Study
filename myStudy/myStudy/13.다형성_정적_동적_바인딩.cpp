/*
### 다형성 (간단하게)
- 상속, 오버라이딩, 가상함수, 동적 바인딩 


### 오버라이딩
- 애니멀은 말하는 함수, 고양이는 야옹~ 강아지는 멍멍~
- 함수 내용 재정의


### 정적 바인딩 - 무늬따라 간다.
- Cat* 로 생성하면 cat의 함수 호출
- Animal*로 생성하면 animal 함수 호출
	- Animal 까지만 본다.

### 자바처럼 멤버 함수 호출하려면? 가상 virtual 함수 (다형성의 핵심)
- virtual void Speak()
- Animal* myCat = new Cat();
- myCat.Speak() // 야옹~

### 동적 바인딩 = 가상 함수, 늦은 바인딩
- 무늬가 무엇이든 실체의 멤버 함수가 호출되는 것 (부모의 포인터나 참조를 사용하더라도)
- 실행 중 어떤 함수를 호출할지 결정하기 때문에 정적보다 느리다
- 모든 가상 멤버함수의 주소를 포함한 가상 테이블이 생성된다 = 클래스 마다 하나가 있다.
- 개체를 생성할 때, 해당 클래스의 가상 테이블 주소가 함께 저장

### 가상 테이블
- 왜 느릴까?
- 점프 테이블, 룩업 테이블이라고도 불림
- 가상 테이블이 이 주소에 있고, 그 함수는 이 주소에 있군. 여기 가봐. 하고 점프점프 함

### 가상 소멸자
- Animal* myCat = new Cat(2, "nabi");
- delete myCat
- 위 코드의 문제점은 ~Animal()가 호출된다는것.


*/